[res://scenes/Main.tscn]

note="

here code:

	return
	
	if dragged.is_in_hand:
		if over is hand:
			if over == dragged.in_hand:
				print(\"    ¨reordering card prob\")
				over.reorder_card(dragged, pos)
			else:
				print(\"    ¨changed hands\")
				dragged.in_hand.remove_card_from_hand(dragged)
				over.add_card_to_hand(dragged, pos)
			
		else:
			print(\"    ¨removed \",dragged_name,\" from \",dragged.in_hand.name)
#			print(\"in main dragged pos: \",dragged.translation)
			dragged.in_hand.remove_card_from_hand(dragged)
		
#	elif dragged.is_in_deck:
#		pass
	elif dragged.is_in_dispenser:
		dragged.notify_dispenser()
		dragged.is_in_dispenser = false
		print(\"*****************//////////******\")
		process_received_dragged_over(dragged_name,over_name,pos)
		
	else:
		if over is hand:
			print(\"    ¨added \",dragged_name,\" to \",over.name)
			over.add_card_to_hand(dragged, pos)
		"

[res://scenes/Menu.tscn]

note="



"

[res://scenes/std.tscn]

note="

"

[res://scenes/list.tscn]

note="

"

[res://scenes/player.tscn]

note="
#
#	if not dragging.is_in_group(\"draggable\"):
#		if not dragging.is_in_group(\"shift_draggable\"): return
#
#	if dragging.is_in_group(\"shift_draggable\"):
#		if not Controls.shift_held_down: return


	var off_y = 0
	var siz_y = 1
	for c in dragging.get_children():
		if  not c is MeshInstance: continue
		
		off_y = c.get_aabb().size.y
		siz_y = c.scale.y"

[res://scenes/hand.tscn]

note="


"

[res://scenes/card.tscn]

note="

"

[res://scenes/otherPlayer.tscn]

note="


"

[res://scenes/test.tscn]

note="TODO 
	make card models in blender
	make according UV's
	back-front
	load it in here to a folder 
	reference it in dispenser
	
card_dispenser
	dispenser values exported 
	dispenser shuffles
	create card on top of itself, set up the card
"

[res://scenes/item_dispenser.tscn]

note="


"

[res://scenes/resource_dispenser.tscn]

note="


"

[res://scenes/resource.tscn]

note="

"

[res://scenes/closeup.tscn]

note="

"

[res://scenes/trash.tscn]

note="



"

[res://scenes/dispenser.tscn]

note="



old code:


func aspawn_brc() -> void:
	if get_tree().is_network_server(): return
	var info = {
		\"feedback\":self.get_instance_id(),
		\"type\":dispense
	}
	Spawner.request_dispense(info)
	var brc = load(br_card_path).instance()
	
	brc.is_in_dispenser = true
	brc.in_dispenser = self
	
	
	
	if dispense == \"item\":
		brc.set_name(dispense+str(Spawner.item_index))
		Spawner.item_index += 1
	elif dispense == \"resource\":
		brc.set_name(dispense+str(Spawner.resource_index))
		Spawner.resource_index += 1
	
	
	setup_brc(brc)
	
	Spawner.cards_folder.add_child(brc)
	List.paths[brc.name] = brc.get_path()
	
	tweenit(
		brc,
		translation - Vector3(0,off_y,0),
		translation + Vector3(0,off_y,0)
		)



func setup_brc(brc) -> void:
	brc.set_type(dispense)
	
	brc.card_value = _get_brc_card_value()
	
	brc.update_material()
"

[res://scenes/slot.tscn]

note="


"

[res://scenes/oer.tscn]

note="

"

[res://scenes/small/nametag.tscn]

note="

"

[res://scenes/spawnmenu.tscn]

note="

"

[res://scenes/spawnpanel.tscn]

note="

\"\"\"
func br_item_pressed(val) -> void:
	return
	var naem
	var ob = get_node(\"Items/Grid/\"+\"i\"+str(val))
	if ob:
		naem = ob.get_node(\"vb/Label\").text
		get_parent().get_parent().selected(\"br\", \"item\", naem, val)
	else:
		push_error(\"couldn't find the i\")
\"\"\"







func _on_i1_pressed():
	br_item_pressed(1)



func _on_i2_pressed():
	br_item_pressed(2)


func _on_i3_pressed():
	br_item_pressed(3)


func _on_i4_pressed():
	br_item_pressed(4)


func _on_i5_pressed():
	br_item_pressed(5)


func _on_i6_pressed():
	br_item_pressed(6)


func _on_i7_pressed():
	br_item_pressed(7)


func _on_i8_pressed():
	br_item_pressed(8)


func _on_i9_pressed():
	br_item_pressed(9)


func _on_i10_pressed():
	br_item_pressed(10)


func _on_i11_pressed():
	br_item_pressed(11)


func _on_i12_pressed():
	br_item_pressed(12)


func _on_i13_pressed():
	br_item_pressed(13)



func _on_i14_pressed():
	br_item_pressed(14)



func _on_i15_pressed():
	br_item_pressed(15)


func _on_i16_pressed():
	br_item_pressed(16)


func _on_i17_pressed():
	br_item_pressed(17)


func _on_i18_pressed():
	br_item_pressed(18)


func _on_i19_pressed():
	br_item_pressed(19)


func _on_i20_pressed():
	br_item_pressed(20)


func _on_i30_pressed():
	br_item_pressed(30)


func _on_i31_pressed():
	br_item_pressed(31)


func _on_i32_pressed():
	br_item_pressed(32)


func _on_i33_pressed():
	br_item_pressed(33)


func _on_i34_pressed():
	br_item_pressed(34)


func _on_i35_pressed():
	br_item_pressed(35)


func _on_i36_pressed():
	br_item_pressed(36)


func _on_i37_pressed():
	br_item_pressed(37)


func _on_i38_pressed():
	br_item_pressed(38)


func _on_i39_pressed():
	br_item_pressed(39)


func _on_i40_pressed():
	br_item_pressed(40)


func _on_i41_pressed():
	br_item_pressed(41)


func _on_i42_pressed():
	br_item_pressed(42)


func _on_i43_pressed():
	br_item_pressed(43)


func _on_i44_pressed():
	br_item_pressed(44)


func _on_i45_pressed():
	br_item_pressed(45)


func _on_i46_pressed():
	br_item_pressed(46)


func _on_i47_pressed():
	br_item_pressed(47)


func _on_i48_pressed():
	br_item_pressed(48)


func _on_i49_pressed():
	br_item_pressed(49)


func _on_i50_pressed():
	br_item_pressed(50)


func _on_i51_pressed():
	br_item_pressed(51)


func _on_i52_pressed():
	br_item_pressed(52)


func _on_i53_pressed():
	br_item_pressed(53)


func _on_i54_pressed():
	br_item_pressed(54)


func _on_i55_pressed():
	br_item_pressed(55)


func _on_i56_pressed():
	br_item_pressed(56)


func _on_i57_pressed():
	br_item_pressed(57)


func _on_i58_pressed():
	br_item_pressed(58)


func _on_i59_pressed():
	br_item_pressed(59)


func _on_i60_pressed():
	br_item_pressed(60)


func _on_i61_pressed():
	br_item_pressed(61)


func _on_i62_pressed():
	br_item_pressed(62)


func _on_i63_pressed():
	br_item_pressed(63)
"

[res://scenes/br_card.tscn]

note="


"

[res://scenes/network_interface.tscn]

note="

var all_latest_world_states = {
	id:{
		T:time,
		pointer:pointer_pos
		}
	obj_name:{
		T:time,
		pos:pos,
		rot:rot,
		DO:{\"DO STATE\"}
	}
}







old state_processor:
	\"\"\"
	#	print(\"\\nupws:\\n\",world_state)
	#	print(\"\\nwsc:\\n\",world_state_collection)
		for id in world_state.keys():
			rr_from_id(id)
			
			for key in world_state[id].keys():
				if key == \"T\": continue
				rr_from_key(id,key)
				
				for subkey in world_state[id][key].keys():
					rr_from_subkey(id,key,subkey)
					
				
				Std.erase_if_empty(world_state[id],key)
			
			Std.erase_if_empty(world_state,id)
	\"\"\"








func rr_from_id(id) -> void:
	if not world_state_collection.has(id):
		world_state_collection[id] = world_state[id].duplicate(true)
#		continue
	
	
	if world_state_collection[id][\"T\"] > world_state[id][\"T\"]:
		world_state.erase(id)
		print(\"noo\")
		return
	
	Std.erase_t(world_state[id])


func rr_from_key(id,key) -> void:
	if key == \"T\":
		world_state_collection[id][\"T\"] = world_state[id][\"T\"]
		Std.erase_t(world_state[id])
		return
	
	if not world_state_collection[id].has(key):
		world_state_collection[id][key] = world_state[id][key].duplicate(true)
		return


func rr_from_subkey(id,key,subkey) -> void:
	if subkey == \"DO\":
		rr_from_do(id,key)
		return
	
	if not Std.has_all(world_state_collection,id,key,subkey):
		world_state_collection[id][key][subkey] = world_state[id][key][subkey]
		return
	
	if world_state_collection[id][key][subkey] == world_state[id][key][subkey]:
		world_state[id][key].erase(subkey)
		return
	
	world_state_collection[id][key][subkey] = world_state[id][key][subkey]



func rr_from_do(id,key) -> void:
	
	if not world_state_collection[id][key].has(\"DO\"):
		world_state_collection[id][key][\"DO\"] = world_state[id][key][\"DO\"].duplicate(true)
		return
	
	var ws_p = world_state[id][key][\"DO\"][\"p\"]
	var wsc_p = world_state_collection[id][key][\"DO\"][\"p\"]
	
	if ws_p == wsc_p:
		world_state[id][key].erase(\"DO\")
		return
	
	world_state_collection[id][key][\"DO\"] = world_state[id][key][\"DO\"].duplicate(true)
	world_state_collection[id][key].erase(\"DO\")
#	world_state[id][key].erase(\"DO\")
	
"

[res://scenes/br/br.tscn]

note="

"

[res://Games/chess/chess.tscn]

note="

"

[res://Games/hand.tscn]

note="for everyone
	visible
	hidden
for me
	visible
	hidden"

[res://Games/chess/chess_piece.tscn]

note="

"

[res://scenes/right_click_menu.tscn]

note="

"

[res://Games/deck.tscn]

note="

"

[res://Games/br/trash.tscn]

note="
"

[res://Games/uno/uno_card.tscn]

note="

"

[res://Games/br/br.tscn]

note="
"

[res://scenes/Spawner.tscn]

note="

"

[res://spawnpanel.tscn]

note="

"

[res://scenes/small/ServerListener.tscn]

note="

"

[res://scenes/small/ServerAdvertiser.tscn]

note="

"

[res://Games/uno/UNO.tscn]

note="
"
